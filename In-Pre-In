import java.util.*;

class Node
{
    char data;
    Node left,right;
    Node(char data)
    {
        this.data = data;
        left = null;
        right = null;
    }
}

class ET
{
    Node insert(String equation)
    {
        Stack s = new Stack();
        char [] eq = equation.toCharArray();
        Node n=null;
        for (int i=equation.length()-1;i>-1;i--)
        {
            if (eq[i]=='+' || eq[i]=='-' || eq[i]=='*'||eq[i]=='/'|| eq[i] == '^')
                {
                    n = new Node(eq[i]);
                    n.left = s.pop();
                    n.right = s.pop();
                    s.push(n);
                }
                else
                {
                    n = new Node(eq[i]);
                    s.push(n);
                }
        }
        return n;
    }

    void inorder(Node root)
    {
        if (root != null) 
        {
            inorder(root.left);
            System.out.print(root.data);
            inorder(root.right);
        }
    }
}

class Stack
{
    Node a[]=new Node[100];
    int top=-1;
    void push(Node c)
    {
        if (top == 99)
        {
            System.out.println("Stack already full."); 
        }
        else
        {
            top++;
            a[top]= c;
        }
    }
    
    Node pop()
    {
        int x;
        if (isEmpty())
        {
            System.out.println("Stack already Empty.");
            return null;
        }
        else
        {
            x = top;
            top--;
            return a[x];
        }
    }
    
    boolean isEmpty()
    {
        return (top==-1);
    }
}

public class Main
{
    public static void main (String args [])
    {
        Scanner sc = new Scanner (System.in);
    	ET exp = new ET();
        String equation;
        System.out.println("Enter the equation in infix -");
        equation = sc.nextLine();
        equation = inpre(equation);
        System.out.println("The prefix string: "+equation+equation.length());
		Node n = exp.insert(equation);
    	System.out.println("Inorder traversal of the tree - ");
		exp.inorder(n);
		System.out.println();
    }
    
    static String inpre (String eqin)
	{
		char [] eq = eqin.toCharArray();
		String eqpre = "";
		Stackch s = new Stackch ();
		Stackch s1 = new Stackch ();
		for (int i= eqin.length()-1;i>-1;i--)
		{
			if (eq[i] == '+'||eq[i] == '-'||eq[i] == '*'||eq[i] == '/'||eq[i] == '^')
			{
				if (prec(eq[i])>=prec(s.peek()))
				{
					s.push(eq[i]);
				}
				else
				{
					while (prec(eq[i])<prec(s.peek()))
					{s1.push(s.pop());}
					s.push(eq[i]);
				}
			}
			else if (eq[i]==')')
				{s.push(eq[i]);}
			else if (eq[i]=='(')
			{
				while (s.peek() != ')')
				{
					s1.push(s.pop());
					
				}
			}
			else
			{
				s1.push(eq[i]);
			}
		}
		while (!s.isEmpty())
			{s1.push(s.pop());}
		while (!s1.isEmpty())
		{
		    eqpre = eqpre +s1.pop();
		}
		char[] eqpr = eqpre.toCharArray();
		return eqpre;
	}
	
	static int prec(char op)
	{
		if (op == '+'||op == '-')
			return 1;
		if (op == '*' || op == '/')
			return 2;
		if (op == '^')
			return 3;
		else
			return 0;
	}
}

class Stackch
{
    char a[]=new char[100];
    int top=0;
    void push(char c)
    {
        if (top == 99)
        {
            System.out.println("Stack already full."); 
        }
        else
        {
            top++;
            a[top]= c;
        };
    }
    
    char pop()
    {
        int x;
        if (isEmpty())
        {
            System.out.println("Stack already Empty.");
            return 0;
        }
        else
        {
            x = top;
            top--;
            return a[x];
        }
    }
    
    char peek ()
    {
    	return a[top];
    }
    
    boolean isEmpty()
    {
        return (top==-1);
    }
    
    void printStack()
    {
        for (int i=top;i>-1;i--)
        {
            System.out.print(a[i]+"\n");
        }
    }
}


