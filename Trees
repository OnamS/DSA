import java.util.Scanner;

public class BTree {
    public static void main(String args[]) {
        BST bst = new BST ();
        Scanner sc = new Scanner (System.in);
        int insertel;
        for (int i=0;i<7;i++)
        {
            System.out.println("Enter element to be Inserted - ");
            insertel = sc.nextInt();
            bst.insert(insertel);
        }
        System.out.println("Postorder - ");
        bst.postorder();
        System.out.println("\nPreorder - ");
        bst.preorder();
        System.out.println("\nInorder - ");
        bst.inorder();
        System.out.println("\nDeleting leftmost leaf.");
        bst.delete();
        System.out.println("\nInorder - ");
        bst.inorder();
        System.out.println("\nPostorder - ");
        bst.postorder();
        System.out.println("\nPreorder - ");
        bst.preorder();
        System.out.println("\n");
    }
}

class Node{
    int data;
    Node left;
    Node right;
    Node (int data)
    {
        this.data = data;
        left = null;
        right = null;
    }
}

class BST 
{
    Node root;
    void insert (int data)
    {
        root = insertRec(root, data);
    }

    Node insertRec(Node root, int data)
    {
        if (root == null)
        {
            root = new Node(data);
            return root;
        }
        else if (data < root.data)
            root.left = insertRec(root.left, data);
        else
            root.right = insertRec(root.right, data);
        return root;
    }

    void inorder() 
    { 
        inorderRec(root); 
    }
    void inorderRec(Node root)
    {
        if (root != null) 
        {
            inorderRec(root.left);
            System.out.print(root.data+" ,");
            inorderRec(root.right);
        }
    }
    
    void preorder() 
    { 
        preorderRec(root); 
    }
    void preorderRec(Node root)
    {
        if (root != null) 
        {
            System.out.print(root.data+" ,");
            preorderRec(root.left);
            preorderRec(root.right);
        }
    }

    void postorder() 
    { 
        postorderRec(root); 
    }
    void postorderRec(Node root)
    {
        if (root != null) 
        {
            postorderRec(root.left);
            postorderRec(root.right);
            System.out.print(root.data+" ,");
        }
    }
    
    void delete()
    {
    	Node temp= deleteRec(root);
    }
    
    Node deleteRec(Node root)
    {
    	if (root.right==null && root.left ==null)
    	{
		root = null;
    	}
	else
	{
		root.left = deleteRec(root.left);
	}
	return root;
    }
}
