import java.util.Scanner;

public class Main {
    public static void main(String args[]) {
        int data, choice;
        BST bst = new BST ();
        Scanner sc = new Scanner (System.in);
        for (int i = 0;i<100;i++)
        {
            System.out.println("What would you like to do?\n1.Insert 2.Delete 3.Traverse 4.Exit");
            choice = sc.nextInt();
            if (choice == 1)
            {
                System.out.println("Enter the data you want to insert - ");
                data = sc.nextInt();
                bst.insert(data);
            }
            if (choice == 2)
            {
                System.out.println("Enter the data you want to delete - ");
                data = sc.nextInt();
                bst.delete(data);
            }
            if (choice == 3)
            {
                System.out.println("Enter the type of traversal\n1.preorder 2.inorder 3.Postorder");
                choice = sc.nextInt();
                if (choice == 1)
                {
                    bst.preorder();
                    System.out.println();
                }
                if (choice == 2)
                {
                    bst.inorder();
                    System.out.println();
                }
                if (choice == 3)
                {
                    bst.postorder();
                    System.out.println();
                }
            }
            if (choice == 4)
            {
                break;
            }
        }
    }
}

class Node{
    int data;
    Node left;
    Node right;
    Node (int data)
    {
        this.data = data;
        left = null;
        right = null;
    }
}

class BST 
{
    Node root;
    
    void insert (int data)
    {
        root = insert(root, data);
    }
    Node insert(Node root, int data)
    {
        if (root == null)
        {
            root = new Node(data);
            return root;
        }
        else if (data < root.data)
            root.left = insert(root.left, data);
        else
            root.right = insert(root.right, data);
        return root;
    }

    void inorder() 
    { 
        inorder(root); 
    }
    void inorder(Node root)
    {
        if (root != null) 
        {
            inorder(root.left);
            System.out.print(root.data+" ,");
            inorder(root.right);
        }
    }
    
    void preorder() 
    { 
        preorder(root); 
    }
    void preorder(Node root)
    {
        if (root != null) 
        {
            System.out.print(root.data+" ,");
            preorder(root.left);
            preorder(root.right);
        }
    }

    void postorder() 
    { 
        postorder(root); 
    }
    void postorder(Node root)
    {
        if (root != null) 
        {
            postorder(root.left);
            postorder(root.right);
            System.out.print(root.data+" ,");
        }
    }
    
    void delete(int data)
    {
        root = delete(root, data);
    }

    Node delete(Node root, int data)
    {
        if(root == null)
        {
            return root;
        }
        else if(data < root.data)
        {
            root.left = delete(root.left, data);
        }
        else if(data > root.data)
        {
            root.right = delete(root.right, data);
        }
        else
        {
            if(root.left == null && root.right == null)
            {
                root = null;
            }
            else if(root.left == null)
            {
                root = root.right;
            }
            else if(root.right == null)
            {
                root = root.left;
            }
            else
            {
                Node temp = findMin(root.right);
                root.data = temp.data;
                root.right = delete(root.right, temp.data);
            }
        }
        return root;
    }
    Node findMin(Node root)
    {
        while(root.left != null)
        {
            root = root.left;
        }
    return root;
    }
}
