// Java program for insertion in AVL Tree
public class Main
{
public static void main(String[] args) {
		AVLTree tree = new AVLTree();

		tree.root = tree.insert(tree.root, 10);
		tree.root = tree.insert(tree.root, 3);
		tree.root = tree.insert(tree.root, 2);
		//tree.root = tree.insert(tree.root, 40);
		//tree.root = tree.insert(tree.root, 50);
		//tree.root = tree.insert(tree.root, 25);

		System.out.println("Preorder traversal" +
						" of constructed tree is : ");
		tree.preOrder(tree.root);
	}
}




class Node {
	int key, height;
	Node left, right;

	Node(int d) {
		key = d;
		height = 1;
	}
}

class AVLTree {

	Node root;
	int findHeight(Node p) 
    {
        if (p == null)
        {
            return -1;
        }
        int lheight = findHeight(p.left);
        int rheight = findHeight(p.right);
        if (lheight > rheight) 
            return lheight + 1;
        else
            return rheight + 1;
    }


	Node rightRotate(Node y) {
		Node x = y.left;
		Node T2 = x.right;

		x.right = y;
		y.left = T2;

		y.height = Math.max(findHeight(y.left), findHeight(y.right)) + 1;
		x.height = Math.max(findHeight(x.left), findHeight(x.right)) + 1;

		return x;
	}


	Node LLRotate(Node x) {
		Node y = x.right;
		Node T2 = y.left;

		y.left = x;
		x.right = T2;

		x.height = Math.max(findHeight(x.left), findHeight(x.right));
		y.height = Math.max(findHeight(y.left), findHeight(y.right));

		return y;
	}

	int getBalance(Node N) {
		if (N == null)
			return 0;

		return findHeight(N.left) - findHeight(N.right);
	}

	Node insert(Node node, int key) {

		if (node == null)
			return (new Node(key));

		if (key < node.key)
			node.left = insert(node.left, key);
		else if (key > node.key)
			node.right = insert(node.right, key);
		else
			return node;

		node.height = Math.max(findHeight(node.left),findHeight(node.right));

		int balance = getBalance(node);

		if (balance > 1 && key < node.left.key)
			return rightRotate(node);

		if (balance < -1 && key > node.right.key)
			return leftRotate(node);

		if (balance > 1 && key > node.left.key) {
			node.left = leftRotate(node.left);
			return rightRotate(node);
		}

		if (balance < -1 && key < node.right.key) {
			node.right = rightRotate(node.right);
			return leftRotate(node);
		}

		return node;
	}

	void preOrder(Node node) {
		if (node != null) {
			System.out.print(node.key + " ");
			preOrder(node.left);
			preOrder(node.right);
		}
	}

}
