import java.util.*;

public class Main
{
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner (System.in);
		AVL avl = new AVL();
        int choice;
        int flag = 0;
        while (flag==0)
        {
            System.out.println("1. Insert    0.End");
            choice = sc.nextInt();
            if (choice ==1)
            {
                int data = sc.nextInt();
                avl.root = avl.insert(avl.root,data);
            System.out.println("\nPreorder - ");
    		avl.preorder(avl.root);
    		System.out.println("\nInorder - ");
    		avl.inorder(avl.root);
    		System.out.println();
            }
            
            else if (choice ==0)
            {
                flag = 1;
            }
        }
	}
}




class Node 
{
	int data, height;
	Node left, right;

	Node(int d) {
		this.data = d;
		height = 1;
	}
}

class AVL
{
	Node root;
	int findHeight(Node p) 
    {
        if (p == null)
        {
            return -1;
        }
        int lheight = findHeight(p.left);
        int rheight = findHeight(p.right);
        return Math.max(lheight,rheight)+1;
    }

    int bf(Node N) 
    {
		if (N == null)
			return 0;

		return findHeight(N.left) - findHeight(N.right);
	}
	
	Node LLRotate(Node p) 
	{
		Node q = p.left;
        p.left = q.right;
        q.right = p;

		p.height = Math.max(findHeight(p.left), findHeight(p.right));
		q.height = Math.max(findHeight(q.left), findHeight(q.right));

		return q;
	}


	Node RRRotate(Node p) 
	{
		Node q = p.right;
		p.right = q.left;
		q.left = p;

		p.height = findHeight(p);
		q.height = findHeight(q);

		return q;
	}
	
	Node LRRotate (Node p)
	{
	    p.left = RRRotate(p.left);
	    return LLRotate(p);
	}
	
	Node RLRotate (Node p)
	{
	    p.right = LLRotate(p.right);
	    return RRRotate(p);
	}

	Node insert(Node node, int data) 
	{

		if (node == null)
			return (new Node(data));

		if (data < node.data)
			node.left = insert(node.left, data);
		else if (data > node.data)
			node.right = insert(node.right, data);
		else
			return node;

		node.height = findHeight(node);

		if (bf(node) > 1 && data < node.left.data)
			return LLRotate(node);

		if (bf(node) < -1 && data > node.right.data)
			return RRRotate(node);

		if (bf(node) > 1 && data > node.left.data) 
		{
			return LRRotate(node);
		}

		if (bf(node) < -1 && data < node.right.data)
		{
			return RLRotate(node);
		}

		return node;
	}

	void preorder (Node node) 
	{
		if (node != null) 
		{
			System.out.print(node.data + ",");
			preorder(node.left);
			preorder(node.right);
		}
	}
	
	void inorder (Node node) 
	{
		if (node != null) 
		{
			inorder(node.left);
			System.out.print(node.data + ",");
			inorder(node.right);
		}
	}

}
