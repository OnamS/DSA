import java.util.Scanner;

public class Main {
    public static void main(String args[]) {
        int data, choice;
        AVL avl = new AVL ();
        Scanner sc = new Scanner (System.in);
        avl.insert(10);
        avl.insert(3);
        avl.insert(2);
        avl.insert(1);
        avl.insert(5);
        System.out.println();
        avl.preorder();
        System.out.println();
        avl.inorder();
    }
}

class Node
{
    int data;
    Node left;
    Node right;
    int height;
    Node (int data)
    {
        this.data = data;
        left = null;
        right = null;
    }
}

class AVL 
{
    Node root;
    
    void insert (int data)
    {
        root = insert(root, data);
    }
    Node insert(Node root, int data)
    {
        if (root == null)
        {
            root = new Node(data);
            root.height=findHeight(root);
            return root;
        }
        else if (data < root.data)
            root.left = insert(root.left, data);
        else
            root.right = insert(root.right, data);
        int height = findHeight(root);
        root.height = height;
        return root;
    }
    
    int findHeight(Node p) 
    {
        if (p == null)
        {
            return -1;
        }
        int lheight = findHeight(p.left);
        int rheight = findHeight(p.right);
        if (lheight > rheight) 
            return lheight + 1;
        else
            return rheight + 1;
    }
    
    int bf(Node p)
    {
        if (p==null)
        return 0;
        else
        return findHeight(p.left)-findHeight(p.right);
    }
    
    void LLrotate(Node p)
    {
        Node q = p.left;
        p.left = q.right;
        q.right = p;
    }
    
    Node findparent (Node p)
    {
        Node r = root;
        if (r!=p)
        {
            r = findparent(p)
        }
    }
    void preorder() 
    { 
        preorder(root); 
    }
    void preorder(Node root)
    {
        if (root != null) 
        {
            System.out.print(root.data+" ,");
            preorder(root.left);
            preorder(root.right);
            if (root.data == 3)
            LLrotate(root);
        }
    }
     void inorder() 
    { 
        inorder(root); 
    }
    void inorder(Node root)
    {
        if (root != null) 
        {
            inorder(root.left);
            System.out.print(root.data+" ,");
            inorder(root.right);
        }
    }
}
